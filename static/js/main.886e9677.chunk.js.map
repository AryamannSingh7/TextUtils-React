{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","charAt","toUpperCase","slice","msg","data-bs-dismiss","aria-label","Navbar","togglenav","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","heading2","placeholder","onClick","toggleRed","toggleGreen","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","color","heading","backgroundColor","onChange","event","target","value","rows","disabled","length","newText","showAlert","toLowerCase","reverseText","split","reverse","join","replace","navigator","clipboard","writeText","filter","element","defaultProps","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","redmode","setRedMode","_useState7","_useState8","greenmode","setGreenMode","_useState9","_useState10","tempMode","setTempMode","message","setTimeout","tmode","document","body","my","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.886e9677.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=()=>{\r\n        return props.alert.type.charAt(0).toUpperCase()+props.alert.type.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.togglenav}} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.heading2}</a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2 \" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-info\" type=\"submit\">Search</button>\r\n          </form>\r\n          <div className=\"btn-group mx-2\" role=\"group\" aria-label=\"Basic mixed styles example\">\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={props.toggleRed}>Red</button>\r\n            <button type=\"button\" className=\"btn btn-success\" onClick={props.toggleGreen}>Green</button>\r\n            {/* <button type=\"button\" className=\"btn btn-primary\" onClick={props.toggleBlue}>Blue</button> */}\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input mx-2\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" aria-checked id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes={title: PropTypes.string.isRequired,\r\n                    heading2: PropTypes.string.isRequired\r\n                }\r\nNavbar.defaultProps = {\r\n                    title: 'Insert Title Here',\r\n                    heading2: 'Insert 2nd Title Here'\r\n                  };","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const Uppfun=()=>{\r\n    \r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n    const Lofun=()=>{\r\n  \r\n      let newText=text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n  }\r\n  const ClearText=()=>{\r\n\r\n    let newText='';\r\n    setText(newText);\r\n    props.showAlert(\"Cleared Text\",\"success\");\r\n}\r\n    const CopyText=()=>{\r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Copied Text\",\"success\");\r\n    }\r\nconst handleReverseClick = () => {\r\n  let reverseText=text.split(\"\")\r\n  reverseText=reverseText.reverse();\r\n  reverseText=reverseText.join('');\r\n  reverseText=reverseText.replace(\",\",\"\");\r\n  setText(reverseText);\r\n  props.showAlert(\"Reversed Text\",\"success\");\r\n}\r\n    const chng=(event)=>{\r\n        //console.log(\"On Change\")\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText]=useState('');\r\n  return (\r\n    <>\r\n    <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#01011c'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div>\r\n        <textarea id=\"TextArea\" className=\"form-control\" style={{backgroundColor: props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black' }} onChange={chng} value={text} rows=\"8\" />\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary my-1 mx-1 \" onClick={Uppfun} >Convert to Uppercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-info my-1 mx-1\" onClick={Lofun} >Convert to Lowercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-warning my-1 mx-1\" onClick={ClearText}>Clear Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-danger my-1 mx-1\" onClick={handleReverseClick}>Reverse the String</button>\r\n      <button disabled={text.length===0} className=\"btn btn-secondary my-1 mx-1\" onClick={CopyText}>Copy Text</button>\r\n    </div>\r\n    <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#01011c'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n      <p>{0.008*(text.split(\" \").length-1)} Minutes needed to read this</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:'Enter something in the above textbox to preview it here'}</p>\r\n      <p>{text}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextArea from './Components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether light mode is enabled or not\n  const [alert, setAlert] = useState(null); //set alert\n  const [redmode, setRedMode] = useState(null); //setting Red mode\n  const [greenmode, setGreenMode] = useState('null'); //setting Green alert\n  // const [bluemode, setBlueMode] = useState('null'); //setting Blue alert\n  const [tempMode, setTempMode] = useState(null);\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const togglenav=(tmode)=>{\n    setMode(tmode);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      // setMode('dark');\n      togglenav('dark');\n      setRedMode('dark');\n      // setBlueMode('dark');\n      setGreenMode('dark');\n      document.body.style.backgroundColor='#000000';\n      showAlert(\"Dark mode is enabled\",\"success\");\n    }\n    else{\n      // setMode('light');\n      togglenav('light'); \n      setRedMode('light');\n      // setBlueMode('light');\n      setGreenMode('light');\n      setTempMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode is enabled\",\"success\");\n    }\n  }\n  const toggleRed=()=>{\n    if(redmode!=='danger'){\n            setRedMode('danger');\n            setTempMode(mode);\n            togglenav('danger');\n            document.body.style.backgroundColor='#ff0000';\n            showAlert(\"Red mode is enabled\",\"success\");\n          }\n    else if(tempMode==='light'){\n      setRedMode('light');\n      togglenav('light');\n      document.body.style.backgroundColor='#ffffff';\n      showAlert(\"Light mode is re-enabled\",\"success\");\n    }\n    else{\n      setRedMode('dark');\n      togglenav('dark')\n      document.body.style.backgroundColor='#000000';\n      showAlert(\"Dark mode is re-enabled\",\"success\");\n    }\n  }\n    const toggleGreen=()=>{\n      if(greenmode!=='success'){\n              setGreenMode('success');\n              setTempMode(mode);\n              togglenav('success');\n              document.body.style.backgroundColor='#00FF00';\n              showAlert(\"Green mode is enabled\",\"success\");\n            }\n      else if(tempMode==='light'){\n        setGreenMode('light');\n        togglenav('light');\n        document.body.style.backgroundColor='white';\n        showAlert(\"Light mode is re-enabled\",\"success\");\n      }\n      else{\n        setGreenMode('dark');\n        togglenav('dark'); \n        document.body.style.backgroundColor='#000000';\n        showAlert(\"Dark mode is re-enabled\",\"success\");\n      }\n    }\n      // const toggleBlue=()=>{\n      //   if(bluemode!=='primary'){\n      //           setBlueMode('primary');\n      //           setTempMode(mode);\n      //           document.body.style.backgroundColor='#0000ff';\n      //           showAlert(\"Blue mode is enabled\",\"success\");\n      //         }\n      //   else if(tempMode==='light'){\n      //     setBlueMode('light');\n      //     document.body.style.backgroundColor='white';\n      //     showAlert(\"Light mode is re-enabled\",\"success\");\n      //   }\n      //   else{\n      //     setBlueMode('dark');\n      //     document.body.style.backgroundColor='#000000';\n      //     showAlert(\"Dark mode is re-enabled\",\"success\");\n      //   }\n      // }\n    \n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" heading2=\"About\" mode={mode} toggleMode={toggleMode}  redmode={redmode} toggleRed={toggleRed} greenmode={greenmode} toggleGreen={toggleGreen}/>\n    <Alert alert={alert}/>\n    <div className=\"container\" my=\"3\">\n      <TextArea showAlert={showAlert} heading=\"Enter the text to be displayed to the users: \" mode={mode}/>\n    </div>\n    {/* <Routes>\n          <Route exact path=\"/about\" element={<About/>}/>\n          <Route exact path=\"/\" element={}/>\n        </Routes>\n      </div>\n    </Router> */}\n\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}